<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="filter_status_all" xml:space="preserve">
    <value>Alles</value>
  </data>
  <data name="filter_status_blocked" xml:space="preserve">
    <value>Blockiert</value>
  </data>
  <data name="filter_status_closed" xml:space="preserve">
    <value>Geschlossen</value>
  </data>
  <data name="filter_status_open" xml:space="preserve">
    <value>Offen</value>
  </data>
  <data name="filter_status_open_or_blocked" xml:space="preserve">
    <value>Offen oder Blockiert</value>
  </data>
  <data name="filter_title_empty" xml:space="preserve">
    <value>Nach Titel suchen</value>
  </data>
  <data name="main_delete_confirm" xml:space="preserve">
    <value>Ticket {1} löschen?</value>
  </data>
  <data name="main_delete_error" xml:space="preserve">
    <value>Fehler beim Löschen des Tickets: {1}</value>
  </data>
  <data name="main_delete_question" xml:space="preserve">
    <value>Löschen bestätigen</value>
  </data>
  <data name="main_dir_error" xml:space="preserve">
    <value>Fehler beim Ändern des Ticketverzeichnisses: {1}</value>
  </data>
  <data name="main_edit_close" xml:space="preserve">
    <value>Ticket {1} gespeichert</value>
  </data>
  <data name="main_edit_open" xml:space="preserve">
    <value>Bearbeite Ticket {1}</value>
  </data>
  <data name="main_file" xml:space="preserve">
    <value>Datei</value>
  </data>
  <data name="main_file_delete_ticket" xml:space="preserve">
    <value>Ticket löschen</value>
  </data>
  <data name="main_file_new_ticket" xml:space="preserve">
    <value>Neues Ticket</value>
  </data>
  <data name="main_file_refresh" xml:space="preserve">
    <value>Aktualisieren</value>
  </data>
  <data name="main_file_set_ticket_dir" xml:space="preserve">
    <value>Ticketverzeichnis ändern</value>
  </data>
  <data name="main_load_failure" xml:space="preserve">
    <value>Tickets konnten nicht aus {1} geladen werden: {2}</value>
  </data>
  <data name="main_load_success" xml:space="preserve">
    <value>Tickets aus {1} geladen</value>
  </data>
  <data name="main_new_created" xml:space="preserve">
    <value>Ticket erstellt</value>
  </data>
  <data name="main_new_discarded" xml:space="preserve">
    <value>Ticket verworfen</value>
  </data>
  <data name="main_new_error" xml:space="preserve">
    <value>Fehler beim Erstellen des Tickets: {1}</value>
  </data>
  <data name="main_status_ready" xml:space="preserve">
    <value>Bereit</value>
  </data>
  <data name="main_table_blocked" xml:space="preserve">
    <value>Blockiert</value>
  </data>
  <data name="main_table_closed" xml:space="preserve">
    <value>Geschlossen</value>
  </data>
  <data name="main_table_id" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="main_table_last_changed" xml:space="preserve">
    <value>Letzte Änderung</value>
  </data>
  <data name="main_table_open" xml:space="preserve">
    <value>Offen</value>
  </data>
  <data name="main_table_status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="main_table_tags" xml:space="preserve">
    <value>Tags</value>
  </data>
  <data name="main_table_title" xml:space="preserve">
    <value>Titel</value>
  </data>
  <data name="selector_add" xml:space="preserve">
    <value>Hinzufügen</value>
  </data>
  <data name="selector_title" xml:space="preserve">
    <value>Tickets zum hinzufügen auswählen</value>
  </data>
  <data name="ticket_add_ticket" xml:space="preserve">
    <value>Ticket hinzufügen</value>
  </data>
  <data name="ticket_details_empty" xml:space="preserve">
    <value>Details zum Ticket hier eingeben</value>
  </data>
  <data name="ticket_new_ticket" xml:space="preserve">
    <value>Neues Ticket</value>
  </data>
  <data name="ticket_remove" xml:space="preserve">
    <value>Entfernen</value>
  </data>
  <data name="ticket_status_blocked" xml:space="preserve">
    <value>Blockiert</value>
  </data>
  <data name="ticket_status_close" xml:space="preserve">
    <value>Schließen</value>
  </data>
  <data name="ticket_status_reopen" xml:space="preserve">
    <value>Wieder öffnen</value>
  </data>
  <data name="ticket_tag_empty" xml:space="preserve">
    <value>Hier Tag eingeben, Enter zum bestätigen, Tab zum vervollständigen</value>
  </data>
  <data name="ticket_title_empty" xml:space="preserve">
    <value>Titel hier eingeben</value>
  </data>
</root>